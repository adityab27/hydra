application {
  name = "hydra"
  config.location = "/etc/hydra/application.conf"
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  logger-startup-timeout = 10s
  http.server.request-timeout = 5s

  actor {

    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s

    typed {
      # Default timeout for typed actor methods with non-void return type
      timeout = 10s
    }

    hydra-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    log-dead-letters-during-shutdown = off

    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "hydra.core.protocol.InitiateRequest" = kryo
      "hydra.core.ingest.IngestionReport" = kryo
      "org.joda.time.DateTime" = kryo
      "hydra.core.ingest.HydraRequest" = kryo
      "scala.collection.immutable.$colon$colon" = kryo
      "scala.collection.immutable.Map$EmptyMap$" = kryo
      "hydra.core.transport.DeliveryStrategy$AtMostOnce$" = kryo
      "hydra.core.transport.DeliveryStrategy$AtLeastOnce$" = kryo
      "hydra.core.transport.ValidationStrategy$Strict$" = kryo
      "hydra.core.transport.ValidationStrategy$Relaxed$" = kryo
      "hydra.core.transport.AckStrategy$None$" = kryo
      "hydra.core.transport.AckStrategy$Explicit$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestionError" = kryo
      "scala.Option" = kryo
      "scala.Some" = kryo
      "scala.collection.immutable.Map$Map1" = kryo
      "scala.collection.immutable.Map$Map2" = kryo
      "scala.collection.immutable.Map$Map3" = kryo
      "scala.collection.immutable.Map$Map4" = kryo
      "scala.collection.immutable.Map$Map5" = kryo
      "hydra.core.protocol.IngestorTimeout$" = kryo
      "hydra.core.protocol.InvalidRequest" = kryo
      "hydra.core.protocol.IngestorJoined$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestorIgnored$" = kryo
      "hydra.core.protocol.ValidRequest" = kryo
      "hydra.core.protocol.IngestorError" = kryo
      "hydra.core.protocol.RequestPublished$" = kryo
      "hydra.core.protocol.WaitingForAck$" = kryo
      "scala.collection.immutable.HashMap$HashTrieMap" = kryo
    }

    kryo {
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      implicit-registration-logging = false
      post-serialization-transformations = "lz4"
      kryo-trace = false
      classes = [
        "hydra.core.protocol.InitiateRequest",
        "hydra.core.ingest.IngestionReport",
        "hydra.core.ingest.HydraRequest",
        "scala.collection.immutable.$colon$colon",
        "scala.collection.immutable.Map$EmptyMap$",
        "scala.collection.immutable.Map$Map1",
        "scala.collection.immutable.Map$Map2",
        "scala.collection.immutable.Map$Map3",
        "scala.collection.immutable.Map$Map4",
        "scala.collection.immutable.Map$Map5",
        "hydra.core.transport.DeliveryStrategy$AtMostOnce$",
        "hydra.core.transport.DeliveryStrategy$AtLeastOnce$",
        "hydra.core.transport.ValidationStrategy$Strict$",
        "hydra.core.transport.ValidationStrategy$Relaxed$",
        "hydra.core.transport.AckStrategy$None$",
        "hydra.core.transport.AckStrategy$Explicit$",
        "hydra.core.protocol.IngestorCompleted",
        "hydra.core.protocol.IngestionError",
        "org.joda.time.Instant",
        "hydra.core.protocol.IngestorTimeout$",
        "hydra.core.protocol.InvalidRequest",
        "hydra.core.protocol.IngestorJoined$",
        "hydra.core.protocol.IngestorCompleted$",
        "hydra.core.protocol.IngestorIgnored$",
        "hydra.core.protocol.ValidRequest",
        "hydra.core.protocol.IngestorError",
        "hydra.core.protocol.RequestPublished$",
        "hydra.core.protocol.WaitingForAck$",
        "scala.None$",
        "scala.Option",
        "scala.Some",
        "scala.collection.immutable.Nil$",
        "scala.collection.immutable.HashMap$HashTrieMap"
      ]
      mappings {
        "hydra.core.protocol.InitiateRequest" = 31,
        "hydra.core.ingest.IngestionReport" = 32,
        "hydra.core.ingest.HydraRequest" = 34,
        "scala.collection.immutable.$colon$colon" = 35,
        "scala.collection.immutable.Map$EmptyMap$" = 36,
        "hydra.core.transport.DeliveryStrategy$AtMostOnce$" = 37,
        "hydra.core.transport.DeliveryStrategy$AtLeastOnce$" = 38,
        "hydra.core.transport.ValidationStrategy$Strict$" = 39,
        "hydra.core.transport.ValidationStrategy$Relaxed$" = 40,
        "hydra.core.transport.AckStrategy$None$" = 41,
        "hydra.core.transport.AckStrategy$Explicit$" = 42,
        "hydra.core.protocol.IngestorCompleted$" = 43,
        "scala.collection.immutable.Map$Map1" = 44,
        "hydra.core.protocol.IngestionError" = 45,
        "hydra.core.protocol.IngestorTimeout$" = 46,
        "hydra.core.protocol.InvalidRequest" = 47,
        "hydra.core.protocol.IngestorJoined$" = 48,
        "hydra.core.protocol.IngestorCompleted$" = 49,
        "hydra.core.protocol.IngestorIgnored$" = 50,
        "hydra.core.protocol.ValidRequest" = 51,
        "hydra.core.protocol.IngestorError" = 52,
        "hydra.core.protocol.RequestPublished$" = 53,
        "hydra.core.protocol.WaitingForAck$" = 54
        "scala.collection.immutable.HashMap$HashTrieMap" = 55
        "scala.Some" = 56,
        "scala.collection.immutable.Map$Map2" = 58,
        "scala.collection.immutable.Map$Map3" = 59,
        "scala.collection.immutable.Map$Map4" = 60,
        "scala.collection.immutable.Map$Map5" = 61
      }
    }
  }

  http.server.remote-address-header = on
}
