application {
  name = "hydra"
  config.location = "/etc/hydra/application.conf"
}

container.startup.timeout = 30s

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"  //override this on prod using the application.conf file
  }

  extensions = ${?akka.extensions}[com.romix.akka.serialization.kryo.KryoSerializationExtension,
    de.heikoseeberger.constructr.ConstructrExtension]

  actor {
    provider = cluster
    allow-java-serialization = off

    hydra-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    log-dead-letters-during-shutdown = off

    deployment {
      #Do not remove this; if ingestors are not configured with a router under akka.deployment.actor,
      #a round-robin router is used with this configuration.
      default-ingestor-router {
        nr-of-instances = 2
        optimal-size-exploring-resizer {
          enabled = false
        }
        resizer {
          enabled = true
          lower-bound = 2
          upper-bound = 5
          pressure-threshold = 1
          rampup-rate = 0.2
          backoff-threshold = 0.3
          backoff-rate = 0.1
          messages-per-resize = 100
        }
      }
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "hydra.core.ingest.IngestionReport" = kryo
      "org.joda.time.DateTime" = kryo
      "hydra.core.ingest.HydraRequest" = kryo
      "scala.collection.immutable.$colon$colon" = kryo
      "scala.collection.immutable.Map$EmptyMap$" = kryo
      "hydra.core.transport.ValidationStrategy$Strict$" = kryo
      "hydra.core.transport.ValidationStrategy$Relaxed$" = kryo
      "hydra.core.transport.AckStrategy$NoAck$" = kryo
      "hydra.core.transport.AckStrategy$TransportAck$" = kryo
      "hydra.core.transport.AckStrategy$LocalAck$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestionError" = kryo
      "scala.Option" = kryo
      "scala.Some" = kryo
      "scala.collection.immutable.Map$Map1" = kryo
      "scala.collection.immutable.Map$Map2" = kryo
      "scala.collection.immutable.Map$Map3" = kryo
      "scala.collection.immutable.Map$Map4" = kryo
      "hydra.core.protocol.IngestorTimeout$" = kryo
      "hydra.core.protocol.InvalidRequest" = kryo
      "hydra.core.protocol.IngestorJoined$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestorIgnored$" = kryo
      "hydra.core.protocol.ValidRequest" = kryo
      "hydra.core.protocol.IngestorError" = kryo
      "hydra.core.protocol.RequestPublished$" = kryo
      "scala.collection.immutable.HashMap$HashTrieMap" = kryo
    }

    kryo {
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      implicit-registration-logging = true
      post-serialization-transformations = "lz4"
      kryo-trace = false
      classes = [
        "hydra.core.ingest.IngestionReport",
        "hydra.core.ingest.HydraRequest",
        "scala.collection.immutable.$colon$colon",
        "scala.collection.immutable.Map$EmptyMap$",
        "scala.collection.immutable.Map$Map1",
        "scala.collection.immutable.Map$Map2",
        "scala.collection.immutable.Map$Map3",
        "scala.collection.immutable.Map$Map4",
        "hydra.core.transport.ValidationStrategy$Strict$",
        "hydra.core.transport.ValidationStrategy$Relaxed$",
        "hydra.core.transport.AckStrategy$NoAck$",
        "hydra.core.transport.AckStrategy$TransportAck$",
        "hydra.core.transport.AckStrategy$LocalAck$",
        "hydra.core.protocol.IngestorCompleted",
        "hydra.core.protocol.IngestionError",
        "org.joda.time.Instant",
        "hydra.core.protocol.IngestorTimeout$",
        "hydra.core.protocol.InvalidRequest",
        "hydra.core.protocol.IngestorJoined$",
        "hydra.core.protocol.IngestorCompleted$",
        "hydra.core.protocol.IngestorIgnored$",
        "hydra.core.protocol.ValidRequest",
        "hydra.core.protocol.IngestorError",
        "hydra.core.protocol.RequestPublished$",
        "scala.None$",
        "scala.Option",
        "scala.Some",
        "scala.collection.immutable.Nil$",
        "scala.collection.immutable.HashMap$HashTrieMap"
      ]
      mappings {
        "hydra.core.ingest.IngestionReport" = 32,
        "hydra.core.ingest.HydraRequest" = 34,
        "scala.collection.immutable.$colon$colon" = 35,
        "scala.collection.immutable.Map$EmptyMap$" = 36,
        "hydra.core.transport.ValidationStrategy$Strict$" = 39,
        "hydra.core.transport.ValidationStrategy$Relaxed$" = 40,
        "hydra.core.transport.AckStrategy$NoAck$" = 41,
        "hydra.core.transport.AckStrategy$TransportAck$" = 42,
        "hydra.core.protocol.IngestorCompleted$" = 43,
        "scala.collection.immutable.Map$Map1" = 44,
        "hydra.core.protocol.IngestionError" = 45,
        "hydra.core.protocol.IngestorTimeout$" = 46,
        "hydra.core.protocol.InvalidRequest" = 47,
        "hydra.core.protocol.IngestorJoined$" = 48,
        "hydra.core.protocol.IngestorCompleted$" = 49,
        "hydra.core.protocol.IngestorIgnored$" = 50,
        "hydra.core.protocol.ValidRequest" = 51,
        "hydra.core.protocol.IngestorError" = 52,
        "hydra.core.protocol.RequestPublished$" = 53,
        "scala.collection.immutable.HashMap$HashTrieMap" = 55
        "scala.Some" = 56,
        "scala.collection.immutable.Map$Map2" = 58,
        "scala.collection.immutable.Map$Map3" = 59,
        "scala.collection.immutable.Map$Map4" = 60,
        "hydra.core.transport.AckStrategy$LocalAck$" = 61
      }
    }
  }

  http {
    server.request-timeout = 5s
    server.remote-address-header = on
  }
}
