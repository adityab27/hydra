application.name = hydra_test

akka {
  logger-startup-timeout = 30s
  persistence.journal.plugin = "akka.persistence.journal.inmem"
  persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

}

hydra_test {
  actors {
    kafka {
      consumer_proxy.path = "/user/kafka_consumer_proxy_test"
    }
  }
  schema.registry.url = "mock"
  transports.kafka.path = /user/kafka_producer
  kafka {
    supervisor.path = /system/kafka_producer_actor-2
    producer {
      acks = "1"
      batch.size = 0 //disable
      metadata.fetch.timeout.ms = 10000
      bootstrap.servers = "localhost:8092"
    }

    consumer {
      zookeeper.connect = "localhost:3181"
      group.id = "hydra-group"
      metadata.fetch.timeout.ms = 10000
    }

    formats {
      string {
        key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
        key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
        value.serializer = "org.apache.kafka.common.serialization.StringSerializer"
        value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
        client.id = "hydra.string"
      }
      avro {
        key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
        key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
        value.serializer = "io.confluent.kafka.serializers.KafkaAvroSerializer"
        value.deserializer = "io.confluent.kafka.serializers.KafkaAvroDeserializer"
        client.id = "hydra.avro"
      }
    }
  }
}