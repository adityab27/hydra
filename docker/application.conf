hydra {
  ingest {
    websocket.enabled = true
    classpath-scan = ["hydra.kafka", "hydra.jdbc"]
  }

  transports {
    classpath-scan = ["hydra.kafka", "hydra.jdbc"]
  }

  endpoints = ["hydra.ingest.endpoints.IngestionEndpoint", "hydra.ingest.endpoints.SchemasEndpoint",
    "hydra.ingest.endpoints.IngestorRegistryEndpoint", "hydra.ingest.endpoints.IngestionWebSocketEndpoint",
    "hydra.kafka.endpoints.StreamingTopicsEndpoint",
    "hydra.kafka.endpoints.TopicMetadataEndpoint", "hydra.kafka.endpoints.TopicsEndpoint"]

  schema.registry.url = "http://schema-registry:8081"

  kafka {
    health_check.interval = 10s
    schema.registry.url = "http://schema-registry:8081"
    producer {
      bootstrap.servers = "kafka:29092"
    }
    consumer {
      metadata.broker.list = "kafka:29092"
      zookeeper.connect = "zookeeper:32181"
      group.id = "hydra-group"
      metadata.fetch.timeout.ms = 10000
      bootstrap.servers = "kafka:29092"
    }
  }
}

container {
  metrics.reporters.Slf4j.enabled = false
  startup.timeout = 60s
  http {
    port = 8080
    port = ${?HYDRA_HTTP_PORT}
    cidr {
      # This is a list of IP ranges to allow through. Can be empty.
      allow = ["0.0.0.0/0"]
      deny = []
    }
  }
}

